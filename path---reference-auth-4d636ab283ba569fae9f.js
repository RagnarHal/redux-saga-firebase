webpackJsonp([52603989620341],{1139:function(e,t){e.exports={data:{site:{siteMetadata:{docsDirectory:"docs",github:{url:"https://github.com/n6g7/redux-saga-firebase"}}},file:{base:"auth.md",sourceInstanceName:"reference",markdown:{html:"",frontmatter:{title:"Authentication",methods:[{arguments:[{description:"A verification code sent to the user.",name:"code",type:"String"}],description:"Applies a verification code sent to the user by email or other out-of-band mechanism.",example:"```javascript\nfunction* applyActionCodeSaga(code) {\n  try {\n    yield call(rsf.auth.applyActionCode, code);\n    yield put(applyActionCodeSuccess());\n  }\n  catch(error) {\n    yield put(applyActionCodeFailure(error));\n  }\n}\n```\n",generator:!0,id:"applyActionCode",output:null,signature:"auth.applyActionCode(code)"},{arguments:null,description:"Gets a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every user change.",example:"```javascript\nfunction* syncUserSaga() {\n  const channel = yield call(rsf.auth.channel);\n\n  while(true) {\n    const { error, user } = yield take(channel);\n\n    if (user) yield put(syncUser(user));\n    else yield put(syncError(error));\n  }\n}\n```\n",generator:!1,id:"channel",output:"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits for every user change.",signature:"auth.channel()"},{arguments:[{description:"The confirmation code send via email to the user.",name:"code",type:"String"},{description:"The new password.",name:"newPassword",type:"String"}],description:"Completes the password reset process, given a confirmation code and new password.",example:"```javascript\nfunction* confirmPasswordResetSaga(code, newPassword) {\n  try {\n    yield call(rsf.auth.confirmPasswordReset, code, newPassword);\n    yield put(confirmPasswordResetSuccess());\n  }\n  catch(error) {\n    yield put(confirmPasswordResetFailure(error));\n  }\n}\n```\n",generator:!0,id:"confirmPasswordReset",output:null,signature:"auth.confirmPasswordReset(code, newPassword)"},{arguments:[{description:"The user's email address.",name:"email",type:"String"},{description:"The user's password.",name:"password",type:"String"}],description:"Creates a new user account associated with the specified email address and password.",example:"```javascript\nfunction* createUserSaga(email, password) {\n  try {\n    const user = yield call(rsf.auth.createUserWithEmailAndPassword, email, password);\n    yield put(createUserSuccess(user));\n  }\n  catch(error) {\n    yield put(createUserFailure(error));\n  }\n}\n```\n",generator:!0,id:"createUserWithEmailAndPassword",output:"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.",signature:"auth.createUserWithEmailAndPassword(email, password)"},{arguments:[{description:"The authentication provider to use for the request.",name:"authProvider",type:"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object."}],description:"Links the authenticated provider to the user account using a pop-up based OAuth flow.",example:"```javascript\nconst authProvider = new firebase.auth.GoogleAuthProvider();\n\nfunction* linkSaga() {\n  try {\n    const data = yield call(rsf.auth.linkWithPopup, authProvider);\n    yield put(linkSuccess(data));\n  } catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"linkWithPopup",output:"A [firebase.auth.UserCredential](https://firebase.google.com/docs/reference/js/firebase.auth#.UserCredential) instance.",signature:"auth.linkWithPopup(authProvider)"},{arguments:[{description:"The authentication provider to use for the request.",name:"authProvider",type:"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object."}],description:"Links the authenticated provider to the user account using a full-page redirect flow.",example:"```javascript\nconst authProvider = new firebase.auth.GoogleAuthProvider();\n\nfunction* linkSaga() {\n  try {\n    yield call(rsf.auth.linkWithRedirect, authProvider);\n  } catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"linkWithRedirect",output:null,signature:"auth.linkWithRedirect(authProvider)"},{arguments:[{description:"The action code settings.",name:"actionCodeSettings",type:"An [firebase.auth.ActionCodeSettings](https://firebase.google.com/docs/reference/js/firebase.auth.html#.ActionCodeSettings)"}],description:"Sends a verification email to a user.",example:"```javascript\nfunction* emailVerificationSaga(actionCodeSettings) {\n  try {\n    yield call(rsf.auth.sendEmailVerification, actionCodeSettings);\n    yield put(emailVerificationSendSuccess());\n  }\n  catch(error) {\n    yield put(emailVerificationSendFailure(error));\n  }\n}\n```\n",generator:!0,id:"sendEmailVerification",output:null,signature:"auth.sendEmailVerification(actionCodeSettings)"},{arguments:[{description:"The email address with the password to be reset.",name:"email",type:"String"},{description:"The action code settings.",name:"actionCodeSettings",type:"An [firebase.auth.ActionCodeSettings](https://firebase.google.com/docs/reference/js/firebase.auth.html#.ActionCodeSettings)"}],description:"Sends a password reset email to the given email address.",example:"```javascript\nfunction* sendPasswordResetEmailSaga(email, actionCodeSettings) {\n  try {\n    yield call(rsf.auth.sendPasswordResetEmail, email, actionCodeSettings);\n    yield put(sendPasswordResetEmailSuccess());\n  }\n  catch(error) {\n    yield put(sendPasswordResetEmailFailure(error));\n  }\n}\n```\n",generator:!0,id:"sendPasswordResetEmail",output:null,signature:"auth.sendPasswordResetEmail(email, actionCodeSettings)"},{arguments:[{description:"The authentication credential.",name:"credential",type:"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential.html)"}],description:"Starts the login process with the given credentials and returns any available additional user information, such as user name.",example:"```javascript\nfunction* loginSaga() {\n  const credential = yield select(...)\n  try {\n    const userCredentials = yield call(rsf.auth.signInAndRetrieveDataWithCredential, credential);\n    yield put(loginSuccess(userCredentials));\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInAndRetrieveDataWithCredential",output:"A [firebase.auth.UserCredential](https://firebase.google.com/docs/reference/js/firebase.auth#.UserCredential) instance.",signature:"auth.signInAndRetrieveDataWithCredential(credential)"},{arguments:null,description:"Starts the login process as an anonymous user.",example:"```javascript\nfunction* loginSaga() {\n  try {\n    const data = yield call(rsf.auth.signInAnonymously, authProvider);\n    yield put(loginSuccess(data));\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInAnonymously",output:"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.",signature:"auth.signInAnonymously()"},{arguments:[{description:"The authentication credential.",name:"credential",type:"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential.html)"}],description:"Starts the login process with the given credentials.",example:"```javascript\nfunction* loginSaga() {\n  const credential = yield select(...)\n  try {\n    const user = yield call(rsf.auth.signInWithCredential, credential);\n    yield put(loginSuccess(user));\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInWithCredential",output:"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.",signature:"auth.signInWithCredential(credential)"},{arguments:[{description:"The custom token to sign in with.",name:"token",type:"String"}],description:"Starts the login process using a custom token.",example:"```javascript\nfunction* loginSaga() {\n  const token = yield select(...)\n  try {\n    const user = yield call(rsf.auth.signInWithCustomToken, token);\n    yield put(loginSuccess(user));\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInWithCustomToken",output:"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.",signature:"auth.signInWithCustomToken(token)"},{arguments:[{description:"The user's email address.",name:"email",type:"String"},{description:"The user's password.",name:"password",type:"String"}],description:"Starts the login process using an email address and password.",example:"```javascript\nfunction* loginSaga(email, password) {\n  try {\n    const data = yield call(rsf.auth.signInWithEmailAndPassword, email, password);\n    yield put(loginSuccess(data));\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInWithEmailAndPassword",output:"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.",signature:"auth.signInWithEmailAndPassword(email, password)"},{arguments:[{description:"The user's phone number in E.164 format (e.g. +16505550101).",name:"phoneNumber",type:"String"},{description:"The verifier to use.",name:"applicationVerifier",type:"A [firebase.auth.ApplicationVerifier](https://firebase.google.com/docs/reference/js/firebase.auth.ApplicationVerifier)"}],description:"Starts the login process using the specified phone number.",example:"```javascript\nconst applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n\nfunction* loginSaga() {\n  const phoneNumber = yield select(state => ...)\n\n  try {\n    const confirmationResult = yield call(rsf.auth.signInWithPhoneNumber, phoneNumber, applicationVerifier);\n    const verificationCode = /* implement your own logic to get the user's verification code */\n    const credentials = yield call(confirmationResult.confirm, verificationCode);\n    yield put(loginSuccess(credentials));\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInWithPhoneNumber",output:"A [firebase.auth.ConfirmationResult](https://firebase.google.com/docs/reference/js/firebase.auth.ConfirmationResult) instance.",signature:"auth.signInWithPhoneNumber(phoneNumber, applicationVerifier)"},{arguments:[{description:"The authentication provider to use for the request.",name:"authProvider",type:"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object."}],description:"Starts the login process using the specified AuthProvider.",example:"```javascript\nconst authProvider = new firebase.auth.GoogleAuthProvider();\n\nfunction* loginSaga() {\n  try {\n    const data = yield call(rsf.auth.signInWithPopup, authProvider);\n    yield put(loginSuccess(data));\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInWithPopup",output:"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential) instance.",signature:"auth.signInWithPopup(authProvider)"},{arguments:[{description:"The authentication provider to use for the request.",name:"authProvider",type:"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object."}],description:"Starts the login process using the specified AuthProvider.",example:"```javascript\nconst authProvider = new firebase.auth.GoogleAuthProvider();\n\nfunction* loginSaga() {\n  try {\n    yield call(rsf.auth.signInWithRedirect, authProvider);\n    yield put(loginSuccess());\n  }\n  catch(error) {\n    yield put(loginFailure(error));\n  }\n}\n```\n",generator:!0,id:"signInWithRedirect",output:null,signature:"auth.signInWithRedirect(authProvider)"},{arguments:null,description:"Logs the user out.",example:"```javascript\nfunction* signOutSaga() {\n  try {\n    const data = yield call(rsf.auth.signOut);\n    yield put(signOutSuccess(data));\n  }\n  catch(error) {\n    yield put(signOutFailure(error));\n  }\n}\n```\n",generator:!0,id:"signOut",output:null,signature:"auth.signOut()"},{arguments:[{description:"The authentication provider to use for the request.",name:"authProvider",type:"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object."}],description:"Unlinks a provider from a user account.",example:"```javascript\n  const authProvider = new firebase.auth.GoogleAuthProvider();\n\n  function* unlinkSaga() {\n    try {\n      const data = yield call(rsf.auth.unlink, authProvider);\n      yield put(unlinkSuccess(data));\n    }\n    catch(error) {\n      yield put(unlinkFailure(error));\n    }\n  }\n```\n",generator:!0,id:"unlink",output:"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User) instance.",signature:"auth.unlink(authProvider)"},{arguments:[{description:"The user's email.",name:"email",type:"String"}],description:"Updates the user's email.",example:"```javascript\nfunction* updateEmailSaga(email) {\n  try {\n    yield call(rsf.auth.updateEmail, email);\n    yield put(updateEmail());\n  }\n  catch(error) {\n    yield put(updateEmailFailure(error));\n  }\n}\n```\n",generator:!0,id:"updateEmail",output:null,signature:"auth.updateEmail(email)"},{arguments:[{description:"The user's password.",name:"password",type:"String"}],description:"Updates the user's password.",example:"```javascript\nfunction* updatePasswordSaga(password) {\n  try {\n    yield call(rsf.auth.updatePassword, password);\n    yield put(updatePasswordSuccess());\n  }\n  catch(error) {\n    yield put(updatePasswordFailure(error));\n  }\n}\n```\n",generator:!0,id:"updatePassword",output:null,signature:"auth.updatePassword(password)"},{arguments:[{description:"The profile's displayName and photoURL to update. It can contain a `displayName` and a `photoURL` field, both are nullable strings.",name:"profile",type:"Object"}],description:"Updates the user's basic profile information.",example:'```javascript\nfunction* updateProfileSaga() {\n  try {\n    yield call(rsf.auth.updateProfile, {\n      displayName: "Elon",\n      photoURL: "elon@x.com"\n    });\n    yield put(updateProfileSuccess());\n  }\n  catch(error) {\n    yield put(updateProfileFailure(error));\n  }\n}\n```\n',generator:!0,id:"updateProfile",output:null,signature:"auth.updateProfile(profile)"}]}}}},pathContext:{fileName:"auth"}}}});
//# sourceMappingURL=path---reference-auth-4d636ab283ba569fae9f.js.map