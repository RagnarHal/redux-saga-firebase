{"version":3,"sources":["webpack:///path---reference-auth-4d636ab283ba569fae9f.js","webpack:///./.cache/json/reference-auth.json"],"names":["webpackJsonp","1139","module","exports","data","site","siteMetadata","docsDirectory","github","url","file","base","sourceInstanceName","markdown","html","frontmatter","title","methods","arguments","description","name","type","example","generator","id","output","signature","pathContext","fileName"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,cAAA,OAAAC,QAAiCC,IAAA,iDAAsDC,MAASC,KAAA,UAAAC,mBAAA,YAAAC,UAA8DC,KAAA,GAAAC,aAAyBC,MAAA,iBAAAC,UAAqCC,YAAcC,YAAA,wCAAAC,KAAA,OAAAC,KAAA,WAAoFF,YAAA,wFAAAG,QAAA,gPAAyVC,WAAA,EAAAC,GAAA,kBAAAC,OAAA,KAAAC,UAAA,+BAA0GR,UAAA,KAAAC,YAAA,kIAAAG,QAAA,oQAAsaC,WAAA,EAAAC,GAAA,UAAAC,OAAA,iIAAAC,UAAA,mBAAmNR,YAAcC,YAAA,oDAAAC,KAAA,OAAAC,KAAA,WAAkGF,YAAA,oBAAAC,KAAA,cAAAC,KAAA,WAAuEF,YAAA,oFAAAG,QAAA,8RAAmYC,WAAA,EAAAC,GAAA,uBAAAC,OAAA,KAAAC,UAAA,iDAAiIR,YAAcC,YAAA,4BAAAC,KAAA,QAAAC,KAAA,WAA2EF,YAAA,uBAAAC,KAAA,WAAAC,KAAA,WAAuEF,YAAA,uFAAAG,QAAA,uRAA+XC,WAAA,EAAAC,GAAA,iCAAAC,OAAA,gGAAAC,UAAA,yDAA8OR,YAAcC,YAAA,sDAAAC,KAAA,eAAAC,KAAA,qHAAoNF,YAAA,wFAAAG,QAAA,gSAAyYC,WAAA,EAAAC,GAAA,gBAAAC,OAAA,0HAAAC,UAAA,qCAAmOR,YAAcC,YAAA,sDAAAC,KAAA,eAAAC,KAAA,qHAAoNF,YAAA,wFAAAG,QAAA,mPAA4VC,WAAA,EAAAC,GAAA,mBAAAC,OAAA,KAAAC,UAAA,wCAAoHR,YAAcC,YAAA,4BAAAC,KAAA,qBAAAC,KAAA,gIAA2MF,YAAA,wCAAAG,QAAA,gSAAyVC,WAAA,EAAAC,GAAA,wBAAAC,OAAA,KAAAC,UAAA,mDAAoIR,YAAcC,YAAA,mDAAAC,KAAA,QAAAC,KAAA,WAAkGF,YAAA,4BAAAC,KAAA,qBAAAC,KAAA,gIAA2MF,YAAA,2DAAAG,QAAA,sTAAkYC,WAAA,EAAAC,GAAA,yBAAAC,OAAA,KAAAC,UAAA,2DAA6IR,YAAcC,YAAA,iCAAAC,KAAA,aAAAC,KAAA,sHAA8LF,YAAA,gIAAAG,QAAA,uTAAwcC,WAAA,EAAAC,GAAA,sCAAAC,OAAA,0HAAAC,UAAA,yDAA6QR,UAAA,KAAAC,YAAA,iDAAAG,QAAA,yOAA0TC,WAAA,EAAAC,GAAA,oBAAAC,OAAA,gGAAAC,UAAA,6BAAqMR,YAAcC,YAAA,iCAAAC,KAAA,aAAAC,KAAA,sHAA8LF,YAAA,uDAAAG,QAAA,kRAA0VC,WAAA,EAAAC,GAAA,uBAAAC,OAAA,gGAAAC,UAAA,0CAAqNR,YAAcC,YAAA,oCAAAC,KAAA,QAAAC,KAAA,WAAiFF,YAAA,iDAAAG,QAAA,yQAA2UC,WAAA,EAAAC,GAAA,wBAAAC,OAAA,gGAAAC,UAAA,sCAAkNR,YAAcC,YAAA,4BAAAC,KAAA,QAAAC,KAAA,WAA2EF,YAAA,uBAAAC,KAAA,WAAAC,KAAA,WAAuEF,YAAA,gEAAAG,QAAA,oQAAqVC,WAAA,EAAAC,GAAA,6BAAAC,OAAA,gGAAAC,UAAA,qDAAsOR,YAAcC,YAAA,+DAAAC,KAAA,cAAAC,KAAA,WAAoHF,YAAA,uBAAAC,KAAA,sBAAAC,KAAA,2HAAkMF,YAAA,6DAAAG,QAAA,ylBAAuqBC,WAAA,EAAAC,GAAA,wBAAAC,OAAA,iIAAAC,UAAA,iEAA8QR,YAAcC,YAAA,sDAAAC,KAAA,eAAAC,KAAA,qHAAoNF,YAAA,6DAAAG,QAAA,uSAAqXC,WAAA,EAAAC,GAAA,kBAAAC,OAAA,yHAAAC,UAAA,uCAAsOR,YAAcC,YAAA,sDAAAC,KAAA,eAAAC,KAAA,qHAAoNF,YAAA,6DAAAG,QAAA,yRAAuWC,WAAA,EAAAC,GAAA,qBAAAC,OAAA,KAAAC,UAAA,0CAAwHR,UAAA,KAAAC,YAAA,qBAAAG,QAAA,uNAA4QC,WAAA,EAAAC,GAAA,UAAAC,OAAA,KAAAC,UAAA,mBAAsFR,YAAcC,YAAA,sDAAAC,KAAA,eAAAC,KAAA,qHAAoNF,YAAA,0CAAAG,QAAA,qTAAgXC,WAAA,EAAAC,GAAA,SAAAC,OAAA,2FAAAC,UAAA,8BAAsLR,YAAcC,YAAA,oBAAAC,KAAA,QAAAC,KAAA,WAAiEF,YAAA,4BAAAG,QAAA,2NAAwQC,WAAA,EAAAC,GAAA,cAAAC,OAAA,KAAAC,UAAA,4BAAmGR,YAAcC,YAAA,uBAAAC,KAAA,WAAAC,KAAA,WAAuEF,YAAA,+BAAAG,QAAA,oPAAoSC,WAAA,EAAAC,GAAA,iBAAAC,OAAA,KAAAC,UAAA,kCAA4GR,YAAcC,YAAA,sIAAAC,KAAA,UAAAC,KAAA,WAAqLF,YAAA,gDAAAG,QAAA,kSAAuWC,WAAA,EAAAC,GAAA,gBAAAC,OAAA,KAAAC,UAAA,oCAA4GC,aAAgBC,SAAA","file":"path---reference-auth-4d636ab283ba569fae9f.js","sourcesContent":["webpackJsonp([52603989620341],{\n\n/***/ 1139:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"docsDirectory\":\"docs\",\"github\":{\"url\":\"https://github.com/n6g7/redux-saga-firebase\"}}},\"file\":{\"base\":\"auth.md\",\"sourceInstanceName\":\"reference\",\"markdown\":{\"html\":\"\",\"frontmatter\":{\"title\":\"Authentication\",\"methods\":[{\"arguments\":[{\"description\":\"A verification code sent to the user.\",\"name\":\"code\",\"type\":\"String\"}],\"description\":\"Applies a verification code sent to the user by email or other out-of-band mechanism.\",\"example\":\"```javascript\\nfunction* applyActionCodeSaga(code) {\\n  try {\\n    yield call(rsf.auth.applyActionCode, code);\\n    yield put(applyActionCodeSuccess());\\n  }\\n  catch(error) {\\n    yield put(applyActionCodeFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"applyActionCode\",\"output\":null,\"signature\":\"auth.applyActionCode(code)\"},{\"arguments\":null,\"description\":\"Gets a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every user change.\",\"example\":\"```javascript\\nfunction* syncUserSaga() {\\n  const channel = yield call(rsf.auth.channel);\\n\\n  while(true) {\\n    const { error, user } = yield take(channel);\\n\\n    if (user) yield put(syncUser(user));\\n    else yield put(syncError(error));\\n  }\\n}\\n```\\n\",\"generator\":false,\"id\":\"channel\",\"output\":\"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits for every user change.\",\"signature\":\"auth.channel()\"},{\"arguments\":[{\"description\":\"The confirmation code send via email to the user.\",\"name\":\"code\",\"type\":\"String\"},{\"description\":\"The new password.\",\"name\":\"newPassword\",\"type\":\"String\"}],\"description\":\"Completes the password reset process, given a confirmation code and new password.\",\"example\":\"```javascript\\nfunction* confirmPasswordResetSaga(code, newPassword) {\\n  try {\\n    yield call(rsf.auth.confirmPasswordReset, code, newPassword);\\n    yield put(confirmPasswordResetSuccess());\\n  }\\n  catch(error) {\\n    yield put(confirmPasswordResetFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"confirmPasswordReset\",\"output\":null,\"signature\":\"auth.confirmPasswordReset(code, newPassword)\"},{\"arguments\":[{\"description\":\"The user's email address.\",\"name\":\"email\",\"type\":\"String\"},{\"description\":\"The user's password.\",\"name\":\"password\",\"type\":\"String\"}],\"description\":\"Creates a new user account associated with the specified email address and password.\",\"example\":\"```javascript\\nfunction* createUserSaga(email, password) {\\n  try {\\n    const user = yield call(rsf.auth.createUserWithEmailAndPassword, email, password);\\n    yield put(createUserSuccess(user));\\n  }\\n  catch(error) {\\n    yield put(createUserFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"createUserWithEmailAndPassword\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.createUserWithEmailAndPassword(email, password)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Links the authenticated provider to the user account using a pop-up based OAuth flow.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* linkSaga() {\\n  try {\\n    const data = yield call(rsf.auth.linkWithPopup, authProvider);\\n    yield put(linkSuccess(data));\\n  } catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"linkWithPopup\",\"output\":\"A [firebase.auth.UserCredential](https://firebase.google.com/docs/reference/js/firebase.auth#.UserCredential) instance.\",\"signature\":\"auth.linkWithPopup(authProvider)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Links the authenticated provider to the user account using a full-page redirect flow.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* linkSaga() {\\n  try {\\n    yield call(rsf.auth.linkWithRedirect, authProvider);\\n  } catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"linkWithRedirect\",\"output\":null,\"signature\":\"auth.linkWithRedirect(authProvider)\"},{\"arguments\":[{\"description\":\"The action code settings.\",\"name\":\"actionCodeSettings\",\"type\":\"An [firebase.auth.ActionCodeSettings](https://firebase.google.com/docs/reference/js/firebase.auth.html#.ActionCodeSettings)\"}],\"description\":\"Sends a verification email to a user.\",\"example\":\"```javascript\\nfunction* emailVerificationSaga(actionCodeSettings) {\\n  try {\\n    yield call(rsf.auth.sendEmailVerification, actionCodeSettings);\\n    yield put(emailVerificationSendSuccess());\\n  }\\n  catch(error) {\\n    yield put(emailVerificationSendFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"sendEmailVerification\",\"output\":null,\"signature\":\"auth.sendEmailVerification(actionCodeSettings)\"},{\"arguments\":[{\"description\":\"The email address with the password to be reset.\",\"name\":\"email\",\"type\":\"String\"},{\"description\":\"The action code settings.\",\"name\":\"actionCodeSettings\",\"type\":\"An [firebase.auth.ActionCodeSettings](https://firebase.google.com/docs/reference/js/firebase.auth.html#.ActionCodeSettings)\"}],\"description\":\"Sends a password reset email to the given email address.\",\"example\":\"```javascript\\nfunction* sendPasswordResetEmailSaga(email, actionCodeSettings) {\\n  try {\\n    yield call(rsf.auth.sendPasswordResetEmail, email, actionCodeSettings);\\n    yield put(sendPasswordResetEmailSuccess());\\n  }\\n  catch(error) {\\n    yield put(sendPasswordResetEmailFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"sendPasswordResetEmail\",\"output\":null,\"signature\":\"auth.sendPasswordResetEmail(email, actionCodeSettings)\"},{\"arguments\":[{\"description\":\"The authentication credential.\",\"name\":\"credential\",\"type\":\"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential.html)\"}],\"description\":\"Starts the login process with the given credentials and returns any available additional user information, such as user name.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  const credential = yield select(...)\\n  try {\\n    const userCredentials = yield call(rsf.auth.signInAndRetrieveDataWithCredential, credential);\\n    yield put(loginSuccess(userCredentials));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInAndRetrieveDataWithCredential\",\"output\":\"A [firebase.auth.UserCredential](https://firebase.google.com/docs/reference/js/firebase.auth#.UserCredential) instance.\",\"signature\":\"auth.signInAndRetrieveDataWithCredential(credential)\"},{\"arguments\":null,\"description\":\"Starts the login process as an anonymous user.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  try {\\n    const data = yield call(rsf.auth.signInAnonymously, authProvider);\\n    yield put(loginSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInAnonymously\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInAnonymously()\"},{\"arguments\":[{\"description\":\"The authentication credential.\",\"name\":\"credential\",\"type\":\"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential.html)\"}],\"description\":\"Starts the login process with the given credentials.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  const credential = yield select(...)\\n  try {\\n    const user = yield call(rsf.auth.signInWithCredential, credential);\\n    yield put(loginSuccess(user));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithCredential\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInWithCredential(credential)\"},{\"arguments\":[{\"description\":\"The custom token to sign in with.\",\"name\":\"token\",\"type\":\"String\"}],\"description\":\"Starts the login process using a custom token.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  const token = yield select(...)\\n  try {\\n    const user = yield call(rsf.auth.signInWithCustomToken, token);\\n    yield put(loginSuccess(user));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithCustomToken\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInWithCustomToken(token)\"},{\"arguments\":[{\"description\":\"The user's email address.\",\"name\":\"email\",\"type\":\"String\"},{\"description\":\"The user's password.\",\"name\":\"password\",\"type\":\"String\"}],\"description\":\"Starts the login process using an email address and password.\",\"example\":\"```javascript\\nfunction* loginSaga(email, password) {\\n  try {\\n    const data = yield call(rsf.auth.signInWithEmailAndPassword, email, password);\\n    yield put(loginSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithEmailAndPassword\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInWithEmailAndPassword(email, password)\"},{\"arguments\":[{\"description\":\"The user's phone number in E.164 format (e.g. +16505550101).\",\"name\":\"phoneNumber\",\"type\":\"String\"},{\"description\":\"The verifier to use.\",\"name\":\"applicationVerifier\",\"type\":\"A [firebase.auth.ApplicationVerifier](https://firebase.google.com/docs/reference/js/firebase.auth.ApplicationVerifier)\"}],\"description\":\"Starts the login process using the specified phone number.\",\"example\":\"```javascript\\nconst applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\\n\\nfunction* loginSaga() {\\n  const phoneNumber = yield select(state => ...)\\n\\n  try {\\n    const confirmationResult = yield call(rsf.auth.signInWithPhoneNumber, phoneNumber, applicationVerifier);\\n    const verificationCode = /* implement your own logic to get the user's verification code */\\n    const credentials = yield call(confirmationResult.confirm, verificationCode);\\n    yield put(loginSuccess(credentials));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithPhoneNumber\",\"output\":\"A [firebase.auth.ConfirmationResult](https://firebase.google.com/docs/reference/js/firebase.auth.ConfirmationResult) instance.\",\"signature\":\"auth.signInWithPhoneNumber(phoneNumber, applicationVerifier)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Starts the login process using the specified AuthProvider.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* loginSaga() {\\n  try {\\n    const data = yield call(rsf.auth.signInWithPopup, authProvider);\\n    yield put(loginSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithPopup\",\"output\":\"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential) instance.\",\"signature\":\"auth.signInWithPopup(authProvider)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Starts the login process using the specified AuthProvider.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* loginSaga() {\\n  try {\\n    yield call(rsf.auth.signInWithRedirect, authProvider);\\n    yield put(loginSuccess());\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithRedirect\",\"output\":null,\"signature\":\"auth.signInWithRedirect(authProvider)\"},{\"arguments\":null,\"description\":\"Logs the user out.\",\"example\":\"```javascript\\nfunction* signOutSaga() {\\n  try {\\n    const data = yield call(rsf.auth.signOut);\\n    yield put(signOutSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(signOutFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signOut\",\"output\":null,\"signature\":\"auth.signOut()\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Unlinks a provider from a user account.\",\"example\":\"```javascript\\n  const authProvider = new firebase.auth.GoogleAuthProvider();\\n\\n  function* unlinkSaga() {\\n    try {\\n      const data = yield call(rsf.auth.unlink, authProvider);\\n      yield put(unlinkSuccess(data));\\n    }\\n    catch(error) {\\n      yield put(unlinkFailure(error));\\n    }\\n  }\\n```\\n\",\"generator\":true,\"id\":\"unlink\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User) instance.\",\"signature\":\"auth.unlink(authProvider)\"},{\"arguments\":[{\"description\":\"The user's email.\",\"name\":\"email\",\"type\":\"String\"}],\"description\":\"Updates the user's email.\",\"example\":\"```javascript\\nfunction* updateEmailSaga(email) {\\n  try {\\n    yield call(rsf.auth.updateEmail, email);\\n    yield put(updateEmail());\\n  }\\n  catch(error) {\\n    yield put(updateEmailFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"updateEmail\",\"output\":null,\"signature\":\"auth.updateEmail(email)\"},{\"arguments\":[{\"description\":\"The user's password.\",\"name\":\"password\",\"type\":\"String\"}],\"description\":\"Updates the user's password.\",\"example\":\"```javascript\\nfunction* updatePasswordSaga(password) {\\n  try {\\n    yield call(rsf.auth.updatePassword, password);\\n    yield put(updatePasswordSuccess());\\n  }\\n  catch(error) {\\n    yield put(updatePasswordFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"updatePassword\",\"output\":null,\"signature\":\"auth.updatePassword(password)\"},{\"arguments\":[{\"description\":\"The profile's displayName and photoURL to update. It can contain a `displayName` and a `photoURL` field, both are nullable strings.\",\"name\":\"profile\",\"type\":\"Object\"}],\"description\":\"Updates the user's basic profile information.\",\"example\":\"```javascript\\nfunction* updateProfileSaga() {\\n  try {\\n    yield call(rsf.auth.updateProfile, {\\n      displayName: \\\"Elon\\\",\\n      photoURL: \\\"elon@x.com\\\"\\n    });\\n    yield put(updateProfileSuccess());\\n  }\\n  catch(error) {\\n    yield put(updateProfileFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"updateProfile\",\"output\":null,\"signature\":\"auth.updateProfile(profile)\"}]}}}},\"pathContext\":{\"fileName\":\"auth\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---reference-auth-4d636ab283ba569fae9f.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"docsDirectory\":\"docs\",\"github\":{\"url\":\"https://github.com/n6g7/redux-saga-firebase\"}}},\"file\":{\"base\":\"auth.md\",\"sourceInstanceName\":\"reference\",\"markdown\":{\"html\":\"\",\"frontmatter\":{\"title\":\"Authentication\",\"methods\":[{\"arguments\":[{\"description\":\"A verification code sent to the user.\",\"name\":\"code\",\"type\":\"String\"}],\"description\":\"Applies a verification code sent to the user by email or other out-of-band mechanism.\",\"example\":\"```javascript\\nfunction* applyActionCodeSaga(code) {\\n  try {\\n    yield call(rsf.auth.applyActionCode, code);\\n    yield put(applyActionCodeSuccess());\\n  }\\n  catch(error) {\\n    yield put(applyActionCodeFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"applyActionCode\",\"output\":null,\"signature\":\"auth.applyActionCode(code)\"},{\"arguments\":null,\"description\":\"Gets a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every user change.\",\"example\":\"```javascript\\nfunction* syncUserSaga() {\\n  const channel = yield call(rsf.auth.channel);\\n\\n  while(true) {\\n    const { error, user } = yield take(channel);\\n\\n    if (user) yield put(syncUser(user));\\n    else yield put(syncError(error));\\n  }\\n}\\n```\\n\",\"generator\":false,\"id\":\"channel\",\"output\":\"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits for every user change.\",\"signature\":\"auth.channel()\"},{\"arguments\":[{\"description\":\"The confirmation code send via email to the user.\",\"name\":\"code\",\"type\":\"String\"},{\"description\":\"The new password.\",\"name\":\"newPassword\",\"type\":\"String\"}],\"description\":\"Completes the password reset process, given a confirmation code and new password.\",\"example\":\"```javascript\\nfunction* confirmPasswordResetSaga(code, newPassword) {\\n  try {\\n    yield call(rsf.auth.confirmPasswordReset, code, newPassword);\\n    yield put(confirmPasswordResetSuccess());\\n  }\\n  catch(error) {\\n    yield put(confirmPasswordResetFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"confirmPasswordReset\",\"output\":null,\"signature\":\"auth.confirmPasswordReset(code, newPassword)\"},{\"arguments\":[{\"description\":\"The user's email address.\",\"name\":\"email\",\"type\":\"String\"},{\"description\":\"The user's password.\",\"name\":\"password\",\"type\":\"String\"}],\"description\":\"Creates a new user account associated with the specified email address and password.\",\"example\":\"```javascript\\nfunction* createUserSaga(email, password) {\\n  try {\\n    const user = yield call(rsf.auth.createUserWithEmailAndPassword, email, password);\\n    yield put(createUserSuccess(user));\\n  }\\n  catch(error) {\\n    yield put(createUserFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"createUserWithEmailAndPassword\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.createUserWithEmailAndPassword(email, password)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Links the authenticated provider to the user account using a pop-up based OAuth flow.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* linkSaga() {\\n  try {\\n    const data = yield call(rsf.auth.linkWithPopup, authProvider);\\n    yield put(linkSuccess(data));\\n  } catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"linkWithPopup\",\"output\":\"A [firebase.auth.UserCredential](https://firebase.google.com/docs/reference/js/firebase.auth#.UserCredential) instance.\",\"signature\":\"auth.linkWithPopup(authProvider)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Links the authenticated provider to the user account using a full-page redirect flow.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* linkSaga() {\\n  try {\\n    yield call(rsf.auth.linkWithRedirect, authProvider);\\n  } catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"linkWithRedirect\",\"output\":null,\"signature\":\"auth.linkWithRedirect(authProvider)\"},{\"arguments\":[{\"description\":\"The action code settings.\",\"name\":\"actionCodeSettings\",\"type\":\"An [firebase.auth.ActionCodeSettings](https://firebase.google.com/docs/reference/js/firebase.auth.html#.ActionCodeSettings)\"}],\"description\":\"Sends a verification email to a user.\",\"example\":\"```javascript\\nfunction* emailVerificationSaga(actionCodeSettings) {\\n  try {\\n    yield call(rsf.auth.sendEmailVerification, actionCodeSettings);\\n    yield put(emailVerificationSendSuccess());\\n  }\\n  catch(error) {\\n    yield put(emailVerificationSendFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"sendEmailVerification\",\"output\":null,\"signature\":\"auth.sendEmailVerification(actionCodeSettings)\"},{\"arguments\":[{\"description\":\"The email address with the password to be reset.\",\"name\":\"email\",\"type\":\"String\"},{\"description\":\"The action code settings.\",\"name\":\"actionCodeSettings\",\"type\":\"An [firebase.auth.ActionCodeSettings](https://firebase.google.com/docs/reference/js/firebase.auth.html#.ActionCodeSettings)\"}],\"description\":\"Sends a password reset email to the given email address.\",\"example\":\"```javascript\\nfunction* sendPasswordResetEmailSaga(email, actionCodeSettings) {\\n  try {\\n    yield call(rsf.auth.sendPasswordResetEmail, email, actionCodeSettings);\\n    yield put(sendPasswordResetEmailSuccess());\\n  }\\n  catch(error) {\\n    yield put(sendPasswordResetEmailFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"sendPasswordResetEmail\",\"output\":null,\"signature\":\"auth.sendPasswordResetEmail(email, actionCodeSettings)\"},{\"arguments\":[{\"description\":\"The authentication credential.\",\"name\":\"credential\",\"type\":\"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential.html)\"}],\"description\":\"Starts the login process with the given credentials and returns any available additional user information, such as user name.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  const credential = yield select(...)\\n  try {\\n    const userCredentials = yield call(rsf.auth.signInAndRetrieveDataWithCredential, credential);\\n    yield put(loginSuccess(userCredentials));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInAndRetrieveDataWithCredential\",\"output\":\"A [firebase.auth.UserCredential](https://firebase.google.com/docs/reference/js/firebase.auth#.UserCredential) instance.\",\"signature\":\"auth.signInAndRetrieveDataWithCredential(credential)\"},{\"arguments\":null,\"description\":\"Starts the login process as an anonymous user.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  try {\\n    const data = yield call(rsf.auth.signInAnonymously, authProvider);\\n    yield put(loginSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInAnonymously\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInAnonymously()\"},{\"arguments\":[{\"description\":\"The authentication credential.\",\"name\":\"credential\",\"type\":\"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential.html)\"}],\"description\":\"Starts the login process with the given credentials.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  const credential = yield select(...)\\n  try {\\n    const user = yield call(rsf.auth.signInWithCredential, credential);\\n    yield put(loginSuccess(user));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithCredential\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInWithCredential(credential)\"},{\"arguments\":[{\"description\":\"The custom token to sign in with.\",\"name\":\"token\",\"type\":\"String\"}],\"description\":\"Starts the login process using a custom token.\",\"example\":\"```javascript\\nfunction* loginSaga() {\\n  const token = yield select(...)\\n  try {\\n    const user = yield call(rsf.auth.signInWithCustomToken, token);\\n    yield put(loginSuccess(user));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithCustomToken\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInWithCustomToken(token)\"},{\"arguments\":[{\"description\":\"The user's email address.\",\"name\":\"email\",\"type\":\"String\"},{\"description\":\"The user's password.\",\"name\":\"password\",\"type\":\"String\"}],\"description\":\"Starts the login process using an email address and password.\",\"example\":\"```javascript\\nfunction* loginSaga(email, password) {\\n  try {\\n    const data = yield call(rsf.auth.signInWithEmailAndPassword, email, password);\\n    yield put(loginSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithEmailAndPassword\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User.html) instance.\",\"signature\":\"auth.signInWithEmailAndPassword(email, password)\"},{\"arguments\":[{\"description\":\"The user's phone number in E.164 format (e.g. +16505550101).\",\"name\":\"phoneNumber\",\"type\":\"String\"},{\"description\":\"The verifier to use.\",\"name\":\"applicationVerifier\",\"type\":\"A [firebase.auth.ApplicationVerifier](https://firebase.google.com/docs/reference/js/firebase.auth.ApplicationVerifier)\"}],\"description\":\"Starts the login process using the specified phone number.\",\"example\":\"```javascript\\nconst applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\\n\\nfunction* loginSaga() {\\n  const phoneNumber = yield select(state => ...)\\n\\n  try {\\n    const confirmationResult = yield call(rsf.auth.signInWithPhoneNumber, phoneNumber, applicationVerifier);\\n    const verificationCode = /* implement your own logic to get the user's verification code */\\n    const credentials = yield call(confirmationResult.confirm, verificationCode);\\n    yield put(loginSuccess(credentials));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithPhoneNumber\",\"output\":\"A [firebase.auth.ConfirmationResult](https://firebase.google.com/docs/reference/js/firebase.auth.ConfirmationResult) instance.\",\"signature\":\"auth.signInWithPhoneNumber(phoneNumber, applicationVerifier)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Starts the login process using the specified AuthProvider.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* loginSaga() {\\n  try {\\n    const data = yield call(rsf.auth.signInWithPopup, authProvider);\\n    yield put(loginSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithPopup\",\"output\":\"A [firebase.auth.AuthCredential](https://firebase.google.com/docs/reference/js/firebase.auth.AuthCredential) instance.\",\"signature\":\"auth.signInWithPopup(authProvider)\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Starts the login process using the specified AuthProvider.\",\"example\":\"```javascript\\nconst authProvider = new firebase.auth.GoogleAuthProvider();\\n\\nfunction* loginSaga() {\\n  try {\\n    yield call(rsf.auth.signInWithRedirect, authProvider);\\n    yield put(loginSuccess());\\n  }\\n  catch(error) {\\n    yield put(loginFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signInWithRedirect\",\"output\":null,\"signature\":\"auth.signInWithRedirect(authProvider)\"},{\"arguments\":null,\"description\":\"Logs the user out.\",\"example\":\"```javascript\\nfunction* signOutSaga() {\\n  try {\\n    const data = yield call(rsf.auth.signOut);\\n    yield put(signOutSuccess(data));\\n  }\\n  catch(error) {\\n    yield put(signOutFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"signOut\",\"output\":null,\"signature\":\"auth.signOut()\"},{\"arguments\":[{\"description\":\"The authentication provider to use for the request.\",\"name\":\"authProvider\",\"type\":\"A [firebase.auth.AuthProvider](https://firebase.google.com/docs/reference/js/firebase.auth.AuthProvider) object.\"}],\"description\":\"Unlinks a provider from a user account.\",\"example\":\"```javascript\\n  const authProvider = new firebase.auth.GoogleAuthProvider();\\n\\n  function* unlinkSaga() {\\n    try {\\n      const data = yield call(rsf.auth.unlink, authProvider);\\n      yield put(unlinkSuccess(data));\\n    }\\n    catch(error) {\\n      yield put(unlinkFailure(error));\\n    }\\n  }\\n```\\n\",\"generator\":true,\"id\":\"unlink\",\"output\":\"A [firebase.User](https://firebase.google.com/docs/reference/js/firebase.User) instance.\",\"signature\":\"auth.unlink(authProvider)\"},{\"arguments\":[{\"description\":\"The user's email.\",\"name\":\"email\",\"type\":\"String\"}],\"description\":\"Updates the user's email.\",\"example\":\"```javascript\\nfunction* updateEmailSaga(email) {\\n  try {\\n    yield call(rsf.auth.updateEmail, email);\\n    yield put(updateEmail());\\n  }\\n  catch(error) {\\n    yield put(updateEmailFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"updateEmail\",\"output\":null,\"signature\":\"auth.updateEmail(email)\"},{\"arguments\":[{\"description\":\"The user's password.\",\"name\":\"password\",\"type\":\"String\"}],\"description\":\"Updates the user's password.\",\"example\":\"```javascript\\nfunction* updatePasswordSaga(password) {\\n  try {\\n    yield call(rsf.auth.updatePassword, password);\\n    yield put(updatePasswordSuccess());\\n  }\\n  catch(error) {\\n    yield put(updatePasswordFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"updatePassword\",\"output\":null,\"signature\":\"auth.updatePassword(password)\"},{\"arguments\":[{\"description\":\"The profile's displayName and photoURL to update. It can contain a `displayName` and a `photoURL` field, both are nullable strings.\",\"name\":\"profile\",\"type\":\"Object\"}],\"description\":\"Updates the user's basic profile information.\",\"example\":\"```javascript\\nfunction* updateProfileSaga() {\\n  try {\\n    yield call(rsf.auth.updateProfile, {\\n      displayName: \\\"Elon\\\",\\n      photoURL: \\\"elon@x.com\\\"\\n    });\\n    yield put(updateProfileSuccess());\\n  }\\n  catch(error) {\\n    yield put(updateProfileFailure(error));\\n  }\\n}\\n```\\n\",\"generator\":true,\"id\":\"updateProfile\",\"output\":null,\"signature\":\"auth.updateProfile(profile)\"}]}}}},\"pathContext\":{\"fileName\":\"auth\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/reference-auth.json\n// module id = 1139\n// module chunks = 52603989620341"],"sourceRoot":""}