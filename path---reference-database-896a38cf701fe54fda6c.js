webpackJsonp([21280139501707],{1126:function(e,a){e.exports={data:{site:{siteMetadata:{docsDirectory:"docs",github:{url:"https://github.com/n6g7/redux-saga-firebase"}}},file:{base:"database.md",sourceInstanceName:"reference",markdown:{html:"",frontmatter:{title:"Database",methods:[{arguments:[{description:"The path or reference to the value to read.",name:"pathOrRef",type:"String or [Firebase Database Reference](https://firebase.google.com/docs/reference/js/firebase.database.Reference)"}],description:"Returns the data at this path in firebase's database.",example:"```js\nfunction* getTodo() {\n  const firstTodo = yield call(rsf.database.read, 'todos/1');\n  yield put(gotTodo(firstTodo));\n}\n```\n",generator:!0,id:"read",output:"Whatever value is store at this path in the database (number, string, object, etc).",signature:"database.read(pathOrRef)"},{arguments:[{description:"The path or reference to the destination.",name:"pathOrRef",type:"String or [Firebase Database Reference](https://firebase.google.com/docs/reference/js/firebase.database.Reference)"},{description:"The value to store.",name:"data",type:"Any value"}],description:"Create a new path in the database and stores the data there.",example:"```js\nfunction* addTodo() {\n  const key = yield call(rsf.database.create, 'todos', {\n    done: false,\n    label: 'Do this',\n  });\n  // `key` is something like \"-Kfn7EyLEoHax0YGoQr0\"\n}\n```\n",generator:!0,id:"create",output:"The key newly created (a string).",signature:"database.create(pathOrRef, data)"},{arguments:[{description:"The path or reference to the value to update.",name:"pathOrRef",type:"String or [Firebase Database Reference](https://firebase.google.com/docs/reference/js/firebase.database.Reference)"},{description:"The value to store.",name:"data",type:"Any value"}],description:"Replace the value store at `path` in the database with `data`.",example:"```js\nfunction* updateTodo() {\n  yield call(rsf.database.update, 'todos/-Kfn7EyLEoHax0YGoQr0', {\n    done: true, // yay, it's done now!\n    label: 'Do this',\n  });\n}\n```\n",generator:!0,id:"update",output:null,signature:"database.update(pathOrRef, data)"},{arguments:[{description:"The path or reference to the value to update.",name:"pathOrRef",type:"String or [Firebase Database Reference](https://firebase.google.com/docs/reference/js/firebase.database.Reference)"},{description:"The value to store.",name:"data",type:"Any value"}],description:"Patches the value store at `path` in the database with `data`. Like `database.update` but doesn't remove unmentionned keys.",example:"```js\nfunction* updateTodo() {\n  // With this call, no need to re-send the todo label.\n  yield call(rsf.database.patch, 'todos/-Kfn7EyLEoHax0YGoQr0', {\n    done: true,\n  });\n}\n```\n",generator:!0,id:"patch",output:null,signature:"database.patch(pathOrRef, data)"},{arguments:[{description:"The path or reference to the value to delete.",name:"pathOrRef",type:"String or [Firebase Database Reference](https://firebase.google.com/docs/reference/js/firebase.database.Reference)"}],description:"Removes the value at the specified `path` in the database.",example:"```js\nfunction* deleteTodo() {\n  yield call(rsf.database.delete, 'todos/-Kfn7EyLEoHax0YGoQr0');\n}\n```\n",generator:!0,id:"delete",output:null,signature:"database.delete(pathOrRef)"},{arguments:[{description:"The path or reference to the value to read.",name:"pathOrRef",type:"String or [Firebase Database Reference](https://firebase.google.com/docs/reference/js/firebase.database.Reference)"},{description:"Defaults to `value`. A string describing the type of event to listen for. Options includes `value`, `child_added`, `child_removed`, `child_changed` and `child_moved`. See [Reference.on](https://firebase.google.com/docs/reference/js/firebase.database.Reference#on) documentation for more information.",name:"event",type:"String"}],description:"Returns a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every change at the specified path in the database.",example:"```js\nfunction* syncTodosSaga() {\n  const channel = yield call(rsf.database.channel, 'todos');\n\n  while(true) {\n    const { value: todos } = yield take(channel);\n    yield put(syncTodos(todos));\n  }\n}\n```\n",generator:!1,id:"channel",output:"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every change at the specified path in the database. The emitted value is an object with two keys:\n- `snapshot`: a [firebase.database.DataSnapshot](https://firebase.google.com/docs/reference/js/firebase.database.DataSnapshot) ;\n- `value`: the result of `snapshot.val()`, which is the actual value stored in the database (any type).\n",signature:"database.channel(pathOrRef, event)"},{arguments:[{description:"The path or reference to the value to synced.",name:"pathOrRef",type:"String or [Firebase Database Reference](https://firebase.google.com/docs/reference/js/firebase.database.Reference)"},{description:"An object to configure how the database should be synchronised. It must contain at least the `successActionCreator` which must take a single argument being the value read from the firebase reference. The other possible options are `failureActionCreator` which is called on channel errors and `transform` which is an optional transformer function to be applied to the value before it's passed to the action creator. Default to the identity function (`x => x`).",name:"options",type:"Object"},{description:"One of the following strings: `value`, `child_added`, `child_changed`, `child_removed`, or `child_moved`. Defaults to `value`. More details on the [Reference.on doc](https://firebase.google.com/docs/reference/js/firebase.database.Reference#on).",name:"event",type:"String"}],description:"Automatically dispatches a redux action every time `path` changes.",example:"```js\nimport { syncTodos } from '../actionCreators/todos';\n\nfunction* todoRootSaga() {\n  yield fork(\n    rsf.database.sync,\n    'todos',\n    { successActionCreator: syncTodos }\n  );\n}\n```\n",generator:!0,id:"sync",output:null,signature:"database.sync(pathOrRef, options, event)"}]}}}},pathContext:{fileName:"database"}}}});
//# sourceMappingURL=path---reference-database-896a38cf701fe54fda6c.js.map