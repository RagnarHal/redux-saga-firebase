webpackJsonp([33615249830105],{1127:function(e,t){e.exports={data:{site:{siteMetadata:{docsDirectory:"docs",github:{url:"https://github.com/n6g7/redux-saga-firebase"}}},file:{base:"firestore.md",sourceInstanceName:"reference",markdown:{html:'<p>When using firestore don\'t forget to install and load the <code>@firebase/firestore</code> dependency into your project (as it\'s not part of the <code>firebase</code> package yet):</p>\n<ul>\n<li>\n<p>install the firestore package: <code>yarn add @firebase/firestore</code></p>\n</li>\n<li>\n<p>import it in your project:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> firebase <span class="token keyword">from</span> <span class="token string">\'firebase\'</span>\n<span class="token keyword">import</span> <span class="token string">\'@firebase/firestore\'</span> <span class="token comment">// ðŸ‘ˆ Don\'t forget this!</span>\n<span class="token keyword">import</span> ReduxSagaFirebase <span class="token keyword">from</span> <span class="token string">\'redux-saga-firebase\'</span>\n\n<span class="token keyword">const</span> firebaseApp <span class="token operator">=</span> firebase<span class="token punctuation">.</span><span class="token function">initializeApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> rsf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReduxSagaFirebase</span><span class="token punctuation">(</span>firebaseApp<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> rsf\n</code></pre>\n      </div>\n</li>\n</ul>',frontmatter:{title:"Firestore",methods:[{arguments:[{description:"If using a string, it is a slash-separated path to a collection.",name:"collectionRef",type:"String or [firebase.firestore.CollectionReference](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference)"},{description:"The data to store.",name:"data",type:"Object"}],description:"Adds a new document to this collection with the specified data, assigning it a document ID automatically.",example:"```js\nfunction* addDocument() {\n  const doc = yield call(\n    rsf.firestore.addDocument,\n    'users',\n    {\n      firstName: 'Elon',\n      lastName: 'Musk'\n    }\n  );\n}\n```\n",generator:!0,id:"addDocument",output:"A [DocumentReference](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference)",signature:"firestore.addDocument(collectionRef, data)"},{arguments:[{description:'To [filter](https://firebase.google.com/docs/firestore/query-data/get-data), [order or limit](https://firebase.google.com/docs/firestore/query-data/order-limit-data) data, pass a [firebase.firestore.Query](https://firebase.google.com/docs/reference/js/firebase.firestore.Query) (eg. `rsf.firestore.channel(colRef.where("capital", "==", true))`). If using a string, it is a slash-separated path to a document or a collection (unfiltered).',name:"pathOrRef",type:"String, [firebase.firestore.CollectionReference](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference), [firebase.firestore.DocumentReference](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference) or [firebase.firestore.Query](https://firebase.google.com/docs/reference/js/firebase.firestore.Query)"},{description:"Either `collection` or `document`. Defaults to `collection`.",name:"type",type:"A string"}],description:"Returns a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every time the data at `pathOrRef` in firestore changes.",example:"```js\nfunction* syncTodosSaga() {\n  const channel = rsf.firestore.channel('todos');\n\n  while(true) {\n    const todos = yield take(channel);\n    yield put(syncTodos(todos));\n  }\n}\n```\n",generator:!1,id:"channel",output:"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every time the data at `pathOrRef` in firestore changes.",signature:"firestore.channel(pathOrRef, type)"},{arguments:[{description:"If using a string, it is a slash-separated path to a document.",name:"documentRef",type:"String or [firebase.firestore.DocumentReference](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference)."}],description:"Deletes the document referred to by this DocumentReference.",example:"```js\nfunction* deleteDocument() {\n  yield call(rsf.firestore.deleteDocument, 'users/elonm');\n}\n```\n",generator:!0,id:"deleteDocument",output:null,signature:"firestore.deleteDocument(documentRef)"},{arguments:[{description:'To [filter](https://firebase.google.com/docs/firestore/query-data/get-data), [order or limit](https://firebase.google.com/docs/firestore/query-data/order-limit-data) data, pass a [Query](https://firebase.google.com/docs/reference/js/firebase.firestore.Query) (eg. `yield call(rsf.firestore.getCollection, colRef.where("capital", "==", true))`). If using a string, it is a slash-separated path to a collection (unfiltered).',name:"collectionRef",type:"String or [firebase.firestore.CollectionReference](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference) or [firebase.firestore.Query](https://firebase.google.com/docs/reference/js/firebase.firestore.Query)"}],description:"Reads the collection referred to by this collectionRef.",example:"```js\nfunction* getCollection() {\n  const snapshot = yield call(rsf.firestore.getCollection, 'users');\n  let users;\n  snapshot.forEach(user => {\n      users = {\n        ...users,\n        [user.id]: user.data()\n      }\n  });\n\n  yield put(gotUsers(users));\n}\n```\n",generator:!0,id:"getCollection",output:"A [QuerySnapshot](https://firebase.google.com/docs/reference/js/firebase.firestore.QuerySnapshot)",signature:"firestore.getCollection(collectionRef)"},{arguments:[{description:"If using a string, it is a slash-separated path to a document.",name:"documentRef",type:"String or [firebase.firestore.DocumentReference](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference)."}],description:"Reads the document referred to by this documentRef.",example:"```js\nfunction* getDocument() {\n  const snapshot = yield call(rsf.firestore.getDocument, 'users/1');\n  const user = snapshot.data();\n\n  yield put(gotUser(user));\n}\n```\n",generator:!0,id:"getDocument",output:"A [DocumentSnapshot](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentSnapshot)",signature:"firestore.getDocument(documentRef)"},{arguments:[{description:"If using a string, it is a slash-separated path to a document.",name:"documentRef",type:"String or [firebase.firestore.DocumentReference](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference)."},{description:"An object of the fields and values for the document.",name:"data",type:"Object"},{description:"An object to configure the set behavior. Pass `{ merge: true }` to only replace the values specified in the data argument. Fields omitted will remain untouched.",name:"options",type:"Object"}],description:"Writes to the document referred to by this DocumentReference. If the document does not exist yet, it will be created. If you pass options, the provided data can be merged into the existing document.",example:"```js\nfunction* setDocument() {\n  yield call(\n    rsf.firestore.setDocument,\n    'users/1',\n    { firstName: 'Leonardo' }\n  );\n}\n```\n",generator:!0,id:"setDocument",output:null,signature:"firestore.setDocument(documentRef, data, options)"},{arguments:[{description:'To [filter](https://firebase.google.com/docs/firestore/query-data/get-data), [order or limit](https://firebase.google.com/docs/firestore/query-data/order-limit-data) data, pass a [Query](https://firebase.google.com/docs/reference/js/firebase.firestore.Query) (eg. `yield call(rsf.firestore.syncCollection, colRef.where("capital", "==", true), ...)`). If using a string, it is a slash-separated path to a collection (unfiltered).',name:"pathOrRef",type:"String or [firebase.firestore.CollectionReference](https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference) or [firebase.firestore.Query](https://firebase.google.com/docs/reference/js/firebase.firestore.Query)"},{description:"An object to configure how the collection should be synchronised. It must contain at least the `successActionCreator` which must take either a [DocumentSnapshot](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentSnapshot) or a [QuerySnapshot](https://firebase.google.com/docs/reference/js/firebase.firestore.QuerySnapshot) as argument. The other possible options are `failureActionCreator` which is called on channel errors and `transform` which is an optional transformer function to be applied to the value before it's passed to the action creator. Default to the identity function (`x => x`).",name:"options",type:"Object"}],description:"Automatically dispatches a redux action every time the collection at `pathOrRef` changes.",example:"```js\nimport { syncTodos } from '../actionCreators/firestore';\n\nfunction* todosRootSaga() {\n  yield fork(\n    rsf.firestore.syncCollection,\n    'todos',\n    { successActionCreator: syncTodos }\n  );\n}\n```\n",generator:!0,id:"syncCollection",output:null,signature:"firestore.syncCollection(pathOrRef, options)"},{arguments:[{description:"If using a string, it is a slash-separated path to a document.",name:"pathOrRef",type:"String or [firebase.firestore.DocumentReference](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference)"},{description:"An object to configure how the document should be synchronised. It must contain at least the `successActionCreator` which must take either a [DocumentSnapshot](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentSnapshot) or a [QuerySnapshot](https://firebase.google.com/docs/reference/js/firebase.firestore.QuerySnapshot) as argument. The other possible options are `failureActionCreator` which is called on channel errors and `transform` which is an optional transformer function to be applied to the value before it's passed to the action creator. Default to the identity function (`x => x`).",name:"options",type:"Object"}],description:"Automatically dispatches a redux action every time the document at `pathOrRef` changes.",example:"```js\nimport { syncTodo } from '../actionCreators/firestore';\n\nfunction* todosRootSaga() {\n  yield fork(\n    rsf.firestore.syncDocument,\n    'todos/1',\n    { successActionCreator: syncTodo }\n  );\n}\n```\n",generator:!0,id:"syncDocument",output:null,signature:"firestore.syncDocument(pathOrRef, options)"},{arguments:[{description:"If using a string, it is a slash-separated path to a document.",name:"documentRef",type:"String or [firebase.firestore.DocumentReference](https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference)"},{description:"Either an object containing all of the fields and values to update, or a series of arguments alternating between fields (as string or firebase.firestore.FieldPath objects) and values.",name:"args",type:"Object"}],description:"Updates fields in the document referred to by this DocumentReference. The update will fail if applied to a document that does not exist.",example:"```js\nfunction* updateDocument() {\n  yield call(rsf.firestore.updateDocument, 'users/1', 'lastName', 'Da Vinci');\n}\n```\n",generator:!0,id:"updateDocument",output:null,signature:"firestore.updateDocument(documentRef, ...args)"}]}}}},pathContext:{fileName:"firestore"}}}});
//# sourceMappingURL=path---reference-firestore-92331515535299e270c8.js.map