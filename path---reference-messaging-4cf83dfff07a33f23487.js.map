{"version":3,"sources":["webpack:///path---reference-messaging-4cf83dfff07a33f23487.js","webpack:///./.cache/json/reference-messaging.json"],"names":["webpackJsonp","1129","module","exports","data","site","siteMetadata","docsDirectory","github","url","file","base","sourceInstanceName","markdown","html","frontmatter","title","methods","arguments","description","example","generator","id","output","signature","name","type","pathContext","fileName"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,cAAA,OAAAC,QAAiCC,IAAA,iDAAsDC,MAASC,KAAA,eAAAC,mBAAA,YAAAC,UAAmEC,KAAA,GAAAC,aAAyBC,MAAA,YAAAC,UAAgCC,UAAA,KAAAC,YAAA,8IAAAC,QAAA,kMAAgXC,WAAA,EAAAC,GAAA,UAAAC,OAAA,sIAAAC,UAAA,wBAA6NN,YAAcC,YAAA,8aAAAM,KAAA,UAAAC,KAAA,WAA6dP,YAAA,gFAAAC,QAAA,sNAAuTC,WAAA,EAAAC,GAAA,eAAAC,OAAA,KAAAC,UAAA,oCAA4GN,YAAcC,YAAA,2bAAAM,KAAA,UAAAC,KAAA,WAA0eP,YAAA,2FAAAC,QAAA,6MAAyTC,WAAA,EAAAC,GAAA,YAAAC,OAAA,KAAAC,UAAA,iCAAsGN,UAAA,KAAAC,YAAA,kKAAAC,QAAA,uMAAyYC,WAAA,EAAAC,GAAA,UAAAC,OAAA,0JAAAC,UAAA,wCAAgQG,aAAgBC,SAAA","file":"path---reference-messaging-4cf83dfff07a33f23487.js","sourcesContent":["webpackJsonp([245237687190721],{\n\n/***/ 1129:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"docsDirectory\":\"docs\",\"github\":{\"url\":\"https://github.com/n6g7/redux-saga-firebase\"}}},\"file\":{\"base\":\"messaging.md\",\"sourceInstanceName\":\"reference\",\"markdown\":{\"html\":\"\",\"frontmatter\":{\"title\":\"Messaging\",\"methods\":[{\"arguments\":null,\"description\":\"Returns a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits for every message received.\",\"example\":\"```js\\nfunction* readMessages() {\\n  const channel = rsf.messaging.channel();\\n\\n  while(true) {\\n    const message = yield take(channel);\\n    yield put(showMessage(message));\\n  }\\n}\\n```\\n\",\"generator\":false,\"id\":\"channel\",\"output\":\"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits for every message received.\",\"signature\":\"messaging.channel()\"},{\"arguments\":[{\"description\":\"An object to configure how the messages should be synchronised. It must contain at least the `successActionCreator` which must take a new message as a single argument. The other possible options are `failureActionCreator` which is called on channel errors and `transform` which is an optional transformer function to be applied to the value before it's passed to the action creator. Default to the identity function (`x => x`).\",\"name\":\"options\",\"type\":\"Object\"}],\"description\":\"Automatically dispatches a redux action every time a new message is received.\",\"example\":\"```js\\nimport { showMessage } from '../actionCreators/messaging';\\n\\nfunction* notificationsRootSaga() {\\n  yield fork(\\n    rsf.messaging.syncMessages,\\n    { successActionCreator: showMessage }\\n  );\\n}\\n```\\n\",\"generator\":true,\"id\":\"syncMessages\",\"output\":null,\"signature\":\"messaging.syncMessages(options)\"},{\"arguments\":[{\"description\":\"An object to configure how the token should be synchronised. It must contain at least the `successActionCreator` which must take a single argument being the new registration token. The other possible options are `failureActionCreator` which is called on channel errors and `transform` which is an optional transformer function to be applied to the value before it's passed to the action creator. Default to the identity function (`x => x`).\",\"name\":\"options\",\"type\":\"Object\"}],\"description\":\"Automatically dispatches a redux action every time a new registration token is received.\",\"example\":\"```js\\nimport { setToken } from '../actionCreators/messaging';\\n\\nfunction* notificationsRootSaga() {\\n  yield fork(\\n    rsf.messaging.syncToken,\\n    { successActionCreator: setToken }\\n  );\\n}\\n```\\n\",\"generator\":true,\"id\":\"syncToken\",\"output\":null,\"signature\":\"messaging.syncToken(options)\"},{\"arguments\":null,\"description\":\"Returns a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every time the registration token is refreshed.\",\"example\":\"```js\\nfunction* refreshToken() {\\n  const channel = rsf.messaging.tokenRefreshChannel();\\n\\n  while(true) {\\n    const token = yield take(channel);\\n    yield put(setToken(token));\\n  }\\n}\\n```\\n\",\"generator\":false,\"id\":\"channel\",\"output\":\"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every time the registration token is refreshed.\",\"signature\":\"messaging.tokenRefreshChannel()\"}]}}}},\"pathContext\":{\"fileName\":\"messaging\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---reference-messaging-4cf83dfff07a33f23487.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"docsDirectory\":\"docs\",\"github\":{\"url\":\"https://github.com/n6g7/redux-saga-firebase\"}}},\"file\":{\"base\":\"messaging.md\",\"sourceInstanceName\":\"reference\",\"markdown\":{\"html\":\"\",\"frontmatter\":{\"title\":\"Messaging\",\"methods\":[{\"arguments\":null,\"description\":\"Returns a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits for every message received.\",\"example\":\"```js\\nfunction* readMessages() {\\n  const channel = rsf.messaging.channel();\\n\\n  while(true) {\\n    const message = yield take(channel);\\n    yield put(showMessage(message));\\n  }\\n}\\n```\\n\",\"generator\":false,\"id\":\"channel\",\"output\":\"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits for every message received.\",\"signature\":\"messaging.channel()\"},{\"arguments\":[{\"description\":\"An object to configure how the messages should be synchronised. It must contain at least the `successActionCreator` which must take a new message as a single argument. The other possible options are `failureActionCreator` which is called on channel errors and `transform` which is an optional transformer function to be applied to the value before it's passed to the action creator. Default to the identity function (`x => x`).\",\"name\":\"options\",\"type\":\"Object\"}],\"description\":\"Automatically dispatches a redux action every time a new message is received.\",\"example\":\"```js\\nimport { showMessage } from '../actionCreators/messaging';\\n\\nfunction* notificationsRootSaga() {\\n  yield fork(\\n    rsf.messaging.syncMessages,\\n    { successActionCreator: showMessage }\\n  );\\n}\\n```\\n\",\"generator\":true,\"id\":\"syncMessages\",\"output\":null,\"signature\":\"messaging.syncMessages(options)\"},{\"arguments\":[{\"description\":\"An object to configure how the token should be synchronised. It must contain at least the `successActionCreator` which must take a single argument being the new registration token. The other possible options are `failureActionCreator` which is called on channel errors and `transform` which is an optional transformer function to be applied to the value before it's passed to the action creator. Default to the identity function (`x => x`).\",\"name\":\"options\",\"type\":\"Object\"}],\"description\":\"Automatically dispatches a redux action every time a new registration token is received.\",\"example\":\"```js\\nimport { setToken } from '../actionCreators/messaging';\\n\\nfunction* notificationsRootSaga() {\\n  yield fork(\\n    rsf.messaging.syncToken,\\n    { successActionCreator: setToken }\\n  );\\n}\\n```\\n\",\"generator\":true,\"id\":\"syncToken\",\"output\":null,\"signature\":\"messaging.syncToken(options)\"},{\"arguments\":null,\"description\":\"Returns a redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every time the registration token is refreshed.\",\"example\":\"```js\\nfunction* refreshToken() {\\n  const channel = rsf.messaging.tokenRefreshChannel();\\n\\n  while(true) {\\n    const token = yield take(channel);\\n    yield put(setToken(token));\\n  }\\n}\\n```\\n\",\"generator\":false,\"id\":\"channel\",\"output\":\"A redux-saga [Channel](https://redux-saga.github.io/redux-saga/docs/advanced/Channels.html) which emits every time the registration token is refreshed.\",\"signature\":\"messaging.tokenRefreshChannel()\"}]}}}},\"pathContext\":{\"fileName\":\"messaging\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/reference-messaging.json\n// module id = 1129\n// module chunks = 245237687190721"],"sourceRoot":""}